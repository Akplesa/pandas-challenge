#!/usr/bin/env python
# coding: utf-8

# ### Note
# * Instructions have been included for each segment. You do not have to follow them exactly, but they are included to help you think through the steps.

# In[ ]:


# Dependencies and Setup
import pandas as pd

# File to Load (Remember to Change These)
file_to_load = "Resources/purchase_data.csv"

# Read Purchasing File and store into Pandas data frame
purchase_data = pd.read_csv(file_to_load)
purchase_data.head()


# ## Player Count

# * Display the total number of players
# 

# In[ ]:


# Show just the header
#count players
number_players = purchase_data["SN"].nunique()
Total_players= pd.DataFrame({"Total_players": [number_players] })
Total_players


# ## Purchasing Analysis (Total)

# * Run basic calculations to obtain number of unique items, average price, etc.
# 
# 
# * Create a summary data frame to hold the results
# 
# 
# * Optional: give the displayed data cleaner formatting
# 
# 
# * Display the summary data frame
# 

# In[ ]:


Item_ID = purchase_data["Item ID"].nunique()
Item_ID_Total= purchase_data["Item ID"].count()
Total_Revenue= purchase_data["Price"].sum()
Average_Price = purchase_data["Price"].mean()

Purchasing_analysis= pd.DataFrame({"Unique Items": [Item_ID],"Item ID Total ": [Item_ID_Total], 
                                   "Total Revenue": [Total_Revenue], "Average Price": [Average_Price]})

Purchasing_analysis


# ## Gender Demographics

# * Percentage and Count of Male Players
# 
# 
# * Percentage and Count of Female Players
# 
# 
# * Percentage and Count of Other / Non-Disclosed
# 
# 
# 

# In[ ]:


# Create Gender Demographics Percentage
Gender_percentage= purchase_data['Gender'].value_counts(normalize=True) * 100

Gender_percentage.head()


# In[ ]:


#Create Gender Demographics Count
Gender_count= purchase_data['Gender'].value_counts()

Gender_count.head()


# 
# ## Purchasing Analysis (Gender)

# * Run basic calculations to obtain purchase count, avg. purchase price, avg. purchase total per person etc. by gender
# 
# 
# 
# 
# * Create a summary data frame to hold the results
# 
# 
# * Optional: give the displayed data cleaner formatting
# 
# 
# * Display the summary data frame

# In[ ]:





# ## Age Demographics

# In[ ]:


#describe(by gender) ;)

#Purchase_count= purchase_data["Purchase ID"].count()
#Average_purchase_price= purchase_data["Gender"].mean()

#By_Gender= purchase_data.loc[["Male","Female"], ["Purchase ID"]]
#By_Gender


# Grab the data contained within the "Berry" row and the "Phone Number" column



Purchase_ID_Gender= purchase_data.set_index("Gender")
Purchase_ID_Gender.head()

#berry_phone = df.loc["Gender", "Purchase ID"]
#print("Using Loc: " + berry_phone)

#also_berry_phone = df.iloc[1, 2]
#print("Using Iloc: " + also_berry_phone)  Out [5]:  Using Loc: 86-(614)973-1727
#Using Iloc: 86-(614)973-1727
 #In [6]:  # Grab the first five rows of data and the columns from "id" to "Phone Number"
# The problem with using "last_name" as the index is that the values are not unique so duplicates are returned
# If there are duplicates and loc[] is being used, Pandas will return an error
#richardson_to_morales = df.loc[["Richardson", "Berry", "Hudson",
                                #"Mcdonald", "Morales"], ["id", "first_name", "Phone Number"]]
#print(richardson_to_morales)

#print()


# * Establish bins for ages
# 
# 
# * Categorize the existing players using the age bins. Hint: use pd.cut()
# 
# 
# * Calculate the numbers and percentages by age group
# 
# 
# * Create a summary data frame to hold the results
# 
# 
# * Optional: round the percentage column to two decimal points
# 
# 
# * Display Age Demographics Table
# 

# In[ ]:





# ## Purchasing Analysis (Age)

# * Bin the purchase_data data frame by age
# 
# 
# * Run basic calculations to obtain purchase count, avg. purchase price, avg. purchase total per person etc. in the table below
# 
# 
# * Create a summary data frame to hold the results
# 
# 
# * Optional: give the displayed data cleaner formatting
# 
# 
# * Display the summary data frame

# In[ ]:





# ## Top Spenders

# * Run basic calculations to obtain the results in the table below
# 
# 
# * Create a summary data frame to hold the results
# 
# 
# * Sort the total purchase value column in descending order
# 
# 
# * Optional: give the displayed data cleaner formatting
# 
# 
# * Display a preview of the summary data frame
# 
# 

# In[ ]:





# ## Most Popular Items

# * Retrieve the Item ID, Item Name, and Item Price columns
# 
# 
# * Group by Item ID and Item Name. Perform calculations to obtain purchase count, item price, and total purchase value
# 
# 
# * Create a summary data frame to hold the results
# 
# 
# * Sort the purchase count column in descending order
# 
# 
# * Optional: give the displayed data cleaner formatting
# 
# 
# * Display a preview of the summary data frame
# 
# 

# In[ ]:





# ## Most Profitable Items

# * Sort the above table by total purchase value in descending order
# 
# 
# * Optional: give the displayed data cleaner formatting
# 
# 
# * Display a preview of the data frame
# 
# 

# In[ ]:




